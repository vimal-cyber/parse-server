import java.util.*;  
    
public class BasicLinkedHashMap  
{  
    public static void main(String a[])  
    {  
        LinkedHashMap<String, String> lhm =  
                       new LinkedHashMap<String, String>();  
        lhm.put("one", "practice.geeksforgeeks.org");  
        lhm.put("two", "code.geeksforgeeks.org");  
        lhm.put("four", "quiz.geeksforgeeks.org");  
    
        // It prints the elements in same order   
        // as they were inserted      
        System.out.println(lhm);  
    
        System.out.println("Getting value for key 'one': " 
                                       + lhm.get("one"));  
        System.out.println("Size of the map: " + lhm.size());  
        System.out.println("Is map empty? " + lhm.isEmpty());  
        System.out.println("Contains key 'two'? "+   
                                  lhm.containsKey("two"));  
        System.out.println("Contains value 'practice.geeks"
        +"forgeeks.org'? "+ lhm.containsValue("practice"+  
        ".geeksforgeeks.org"));  
        System.out.println("delete element 'one': " +   
                           lhm.remove("one"));  
        System.out.println(lhm);  
    }  
}  
Output:
{one=practice.geeksforgeeks.org, two=code.geeksforgeeks.org, four=quiz.geeksforgeeks.org}
Getting value for key 'one': practice.geeksforgeeks.org
Size of the map: 3
Is map empty? false
Contains key 'two'? true
Contains value 'practice.geeksforgeeks.org'? true
delete element 'one': practice.geeksforgeeks.org
{two=code.geeksforgeeks.org, four=quiz.geeksforgeeks.org}

With the help of ConcurretHashMap(Similar to Hashtable, Synchronized, but faster as multiple locks are used)
filter_none
edit
play_arrow

brightness_4
// Java program to demonstrate working of ConcurrentHashMap 
  
import java.util.concurrent.*; 
class ConcurrentHashMapDemo { 
    public static void main(String[] args) 
    { 
        ConcurrentHashMap<Integer, String> m =  
                   new ConcurrentHashMap<Integer, String>(); 
        m.put(100, "Hello"); 
        m.put(101, "Geeks"); 
        m.put(102, "Geeks"); 
  
        // Printing the ConcurrentHashMap 
        System.out.println("ConcurentHashMap: " + m); 
  
        // Adding Hello at 101 key 
        // This is already present in ConcurrentHashMap object 
        // Therefore its better to use putIfAbsent for such cases 
        m.putIfAbsent(101, "Hello"); 
  
        // Printing the ConcurrentHashMap 
        System.out.println("\nConcurentHashMap: " + m); 
  
        // Trying to remove entry for 101 key 
        // since it is present 
        m.remove(101, "Geeks"); 
  
        // Printing the ConcurrentHashMap 
        System.out.println("\nConcurentHashMap: " + m); 
  
        // replacing the value for key 101 
        // from "Hello" to "For" 
        m.replace(100, "Hello", "For"); 
  
        // Printing the ConcurrentHashMap 
        System.out.println("\nConcurentHashMap: " + m); 
    } 
} 
Output:
ConcurentHashMap: {100=Hello, 101=Geeks, 102=Geeks}

ConcurentHashMap: {100=Hello, 101=Geeks, 102=Geeks}

ConcurentHashMap: {100=Hello, 102=Geeks}

ConcurentHashMap: {100=For, 102=Geeks}

With the help of HashSet (Similar to HashMap, but maintains only keys, not pair)
filter_none
edit
play_arrow

brightness_4
// Java program to demonstrate working of HashSet 
import java.util.*; 
  
class Test { 
    public static void main(String[] args) 
    { 
        HashSet<String> h = new HashSet<String>(); 
  
        // Adding elements into HashSet usind add() 
        h.add("India"); 
        h.add("Australia"); 
        h.add("South Africa"); 
        h.add("India"); // adding duplicate elements 
  
        // Displaying the HashSet 
        System.out.println(h); 
  
        // Checking if India is present or not 
        System.out.println("\nHashSet contains India or not:"
                           + h.contains("India")); 
  
        // Removing items from HashSet using remove() 
        h.remove("Australia"); 
  
        // Printing the HashSet 
        System.out.println("\nList after removing Australia:" + h); 
  
        // Iterating over hash set items 
        System.out.println("\nIterating over list:"); 
        Iterator<String> i = h.iterator(); 
        while (i.hasNext()) 
            System.out.println(i.next()); 
    } 
} 
